# 비밀번호 마스터
  # 계산기
    #include <stdio.h>

    // 선언
    void p(int num);

    int main(void)
    {
      // function
      // 계산기

      int num = 2;
      p(num);

      // 2 + 3 은?
      num += 3;
      p(num);

      // 5 - 1 은?
      num -= 1;
      p(num);

      // 4 x 3 은?
      num *= 3;
      p(num);


      // 12 / 6 은?
      num /= 6;
      p(num);

      return 0;
    }

    // 정의
    void p(int num)
    {
      printf("num은 %d 입니다\n", num);
    }

  # 함수의 형태
    반환형 함수이름(전달값) { }
    ex)
    							            ↓아무것도 없단 뜻
      (int double float char void) 함수이름(int num1, int num2, char c, float f) //전달값에는 여러개도 가능함
      {
          return num + 4;  // void는 필요없음
      }
  
  # 반환값이 없는 함수
    void function_without_return();   # 함수 선언(맨위)
    function_without_return();        # 사용(중간)
    void function_without_return()    # 함수 정의(맨밑)
    {
      printf("반환값이 없는 함수입니다\n");
    }
  
  # 반환값이 있는 함수
    int function_with_return();       # 함수 선언(맨위)
    int ret = function_with_return(); # 사용(중간)            # 결과: 반환값이 있는 함수입니다.
	  p(ret);                                                          num은 10 입니다
    int function_with_return()        # 함수 정의(맨밑)
    {
      printf("반환값이 있는 함수입니다.\n");
      return 10;
    }
  
  # 전달값이 없는 함수
    function_without_params();  # 위아래도 void로 선언과 정의해줘야함(귀찮아서 생략)
    
  # 전달값이 있는 함수
    void function_with_params(int num1, int num2, int num3);    # 함수 선언(맨위)
    function_with_params(35,27,12);                             # 사용(중간)
    void function_with_params(int num1, int num2, int num3)     # 함수 정의(맨밑)
    {
      printf("전달값이 있는 함수이며, 전달받은 값은 %d, %d, %d 입니다\n",
        num1, num2, num3);
    }
  
  # 반환값과 전달값이 있는 함수
    
