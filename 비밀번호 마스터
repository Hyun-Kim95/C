# 비밀번호 마스터
  # 계산기
    #include <stdio.h>

    // 선언
    void p(int num);

    int main(void)
    {
      // function
      // 계산기

      int num = 2;
      p(num);

      // 2 + 3 은?
      num += 3;
      p(num);

      // 5 - 1 은?
      num -= 1;
      p(num);

      // 4 x 3 은?
      num *= 3;
      p(num);


      // 12 / 6 은?
      num /= 6;
      p(num);

      return 0;
    }

    // 정의
    void p(int num)
    {
      printf("num은 %d 입니다\n", num);
    }

  # 함수의 형태
    반환형 함수이름(전달값) { }
    ex)
    							            ↓아무것도 없단 뜻
      (int double float char void) 함수이름(int num1, int num2, char c, float f) //전달값에는 여러개도 가능함
      {
          return num + 4;  // void는 필요없음
      }
  
  # 반환값이 없는 함수
    void function_without_return();   # 함수 선언(맨위)
    function_without_return();        # 사용(중간)
    void function_without_return()    # 함수 정의(맨밑)
    {
      printf("반환값이 없는 함수입니다\n");
    }
  
  # 반환값이 있는 함수
    int function_with_return();       # 함수 선언(맨위)
    int ret = function_with_return(); # 사용(중간)            # 결과: 반환값이 있는 함수입니다.
	  p(ret);                                                          num은 10 입니다
    int function_with_return()        # 함수 정의(맨밑)
    {
      printf("반환값이 있는 함수입니다.\n");
      return 10;
    }
  
  # 전달값이 없는 함수
    function_without_params();  # 위아래도 void로 선언과 정의해줘야함(귀찮아서 생략)
    
  # 전달값이 있는 함수
    void function_with_params(int num1, int num2, int num3);    # 함수 선언(맨위)
    function_with_params(35,27,12);                             # 사용(중간)
    void function_with_params(int num1, int num2, int num3)     # 함수 정의(맨밑)
    {
      printf("전달값이 있는 함수이며, 전달받은 값은 %d, %d, %d 입니다\n",
        num1, num2, num3);
    }
  
  # 반환값과 전달값이 있는 함수
    int apple(int total, int ate); // 전체 total 개에서 ate 개를 먹고 남은 수를 반환
    // 파라미터(전달값)도 받고, 반환값이 있는 함수
    int ret = apple(5, 2); // 5개의 사과 중에서 2개를 먹었어요
    printf("사과 5개 중에 2개를 먹으면? %d 개가 남아요\n", ret);
    //printf("사과 %d 개 중에 %d 개를 먹으면? %d 개가 남아요\n", 10, 4, apple(10,4));	# 위 2줄 대신 이렇게 사용 가능
    
    int apple(int total, int ate)
    {
      printf("전달값과 반환값이 있는 함수입니다\n");
      return total - ate;
    }

  # 함수를 이용한 계산기
    int add(int num1, int num2);
    int sub(int num1, int num2);
    int mul(int num1, int num2);
    int div(int num1, int num2);	# 선언
    
    // 계산기 함수
    int num = 2;
    num = add(num, 3);	// 더하기
    p(num);
    
    num = sub(num, 1);	// 빼기
    p(num);
    
    num = mul(num, 3);	// 곱하기
    p(num);
    
    num = div(num, 6);	// 나누기
    p(num);				# 사용
    
    int add(int num1, int num2)		# 정의
    {
    	return num1 + num2;
    }
    
    int sub(int num1, int num2)
    {
    	return num1 - num2;
    }
    
    int mul(int num1, int num2)
    {
    	return num1 * num2;
    }

    int div(int num1, int num2)
    {
    	return num1 / num2;
    }

  # 프로젝트
  	#include <stdio.h>
	#include <time.h>

	int getRandomNumber(int level);
	void showQuestion(int level, int num1, int num2);
	void success();
	void fail(int num1, int num2);
	-------------------------------------------------------------------------↑↑ 함수 선언
	int main(void)
	{
		// 문이 5개가 있고, 각 문마다 점점 어려운 수식 퀴즈가 출제(랜덤)
		// 맞히면 통과, 틀리면 실패
		srand(time(NULL));
		int count = 0;			# 맞힌 갯수
		for (int i = 1; i <= 5; i++)
		{
			// x * y = ?
			int num1 = getRandomNumber(i);
			int num2 = getRandomNumber(i);
			showQuestion(i, num1, num2);

			int answer = -1;
			scanf_s("%d", &answer);
			if (answer == -1)
			{
				printf("프로그램을 종료합니다\n");
				exit(0);	// 프로그램종료
			}
			else if (answer == num1 * num2)
			{
				// 성공
				success();
				count++;
			}
			else
			{
				// 실패
				fail(num1, num2);
			}

		}

		printf("\n\n 당신은 5개의 비밀번호 중 %d 개를 맞혔습니다\n", count);

		return 0;
	}
	-----------------------------------------------------------------------------------↓↓ 함수 정의
	int getRandomNumber(int level)
	{
		return rand() % (level * 7) + 1;	// 1 ~ ((level * 7) + 1) 중에 랜덤
	}

	void showQuestion(int level, int num1, int num2)
	{
		printf("\n\n\n######### %d 번째 비밀번호 #########\n", level);
		printf("\n\t%d x %d 는?\n\n", num1, num2);
		printf("#############################################\n");
		printf("\n비밀번호를 입력하세요 (종료: -1) >>");
	}

	void success()
	{
		printf("\n >> Good ! 정답입니다\n");
	}

	void fail(int num1, int num2)
	{
		printf("\n >> 땡! 틀렸습니다(정답: %d)\n", num1 * num2);
	}
