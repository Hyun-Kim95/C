# 친구들의 주소
  // 포인터

	// [철수] : 101호 -> 메모리 공간의 주소 -> 결과가 항상 바뀜
	// [영희] : 201호
	// [민수] : 301호
	// 각 문 앞에 '암호' 가 걸려 있음
	int 철수 = 1; // 암호
	int 영희 = 2; // 암호
	int 민수 = 3; // 암호

	printf("철수네 주소 : %d, 암호 : %d\n", &철수, 철수);  // &철수 : 메모리 공간의 주소를 가져옴
	printf("영희네 주소 : %d, 암호 : %d\n", &영희, 영희);
	printf("민수네 주소 : %d, 암호 : %d\n", &민수, 민수);

# 미션맨(포인터)의 등장
  // 첫 번째 미션 : 아파트의 각 집에 방문하여 문에 적힌 암호 확인
	int* 미션맨; // 포인터 변수
	미션맨 = &철수;
	printf("미션맨이 방문하는 곳 주소 : %d, 암호 : %d\n", 미션맨, *미션맨);
	
	미션맨 = &영희;
	printf("미션맨이 방문하는 곳 주소 : %d, 암호 : %d\n", 미션맨, *미션맨);
	
	미션맨 = &민수;
	printf("미션맨이 방문하는 곳 주소 : %d, 암호 : %d\n", 미션맨, *미션맨);

	// 두 번째 미션 : 각 암호에 3을 곱해라
	미션맨 = &철수;
	*미션맨 = *미션맨 * 3;
	printf("미션맨이 암호를 바꾼 곳 주소 : %d, 암호 : %d\n", 미션맨, *미션맨);

	미션맨 = &영희;
	*미션맨 = *미션맨 * 3;
	printf("미션맨이 암호를 바꾼 곳 주소 : %d, 암호 : %d\n", 미션맨, *미션맨);

	미션맨 = &민수;
	*미션맨 = *미션맨 * 3;
	printf("미션맨이 암호를 바꾼 곳 주소 : %d, 암호 : %d\n", 미션맨, *미션맨);

# 스파이(또다른 포인터)의 등장
  // 미션맨이 바꾼 암호에서 2를 빼라!
  int* 스파이 = 미션맨;
  printf("\n ... 스파이가 미션 수행하는 중 ... \n\n");
  스파이 = &철수;
  *스파이 = *스파이 - 2;	// 철수 = 철수 - 2
  printf("스파이가 방문하는 곳 주소 : %d, 암호 : %d\n", 스파이, *스파이);

  스파이 = &영희;
  *스파이 = *스파이 - 2;
  printf("스파이가 방문하는 곳 주소 : %d, 암호 : %d\n", 스파이, *스파이);

  스파이 = &민수;
  *스파이 = *스파이 - 2;
  printf("스파이가 방문하는 곳 주소 : %d, 암호 : %d\n", 스파이, *스파이);

  printf("\n ... 철수 영희 민수는 집에 오고서는 바뀐 암호를 보고 깜놀 ... \n\n");

  printf("철수네 주소 : %d, 암호 : %d\n", &철수, 철수);
  printf("영희네 주소 : %d, 암호 : %d\n", &영희, 영희);
  printf("민수네 주소 : %d, 암호 : %d\n", &민수, 민수);

  // 참고로.. 미션맨이 사는 곳의 주소는.. &미션맨으로 확인
  printf("미션맨의 주소 : %d\n", &미션맨);
  printf("스파이의 주소 : %d\n", &스파이);

# 배열과 포인터의 관계
  // 배열?
  int arr[3] = { 5, 10, 15 };
  int* ptr = arr;
  for (int i = 0; i < 3; i++)
  {
  	printf("배열 arr[%d]의 값 : %d\n", i, arr[i]);	// 같다 ↓↓↓
  }
  for (int i = 0; i < 3; i++)
  {
  	printf("포인터 ptr[%d]의 값 : %d\n", i, ptr[i]);	// 같다 ↑↑↑
  }
  ptr[0] = 100;
  ptr[1] = 200;
  ptr[2] = 300;
  for (int i = 0; i < 3; i++)
  {
  	//printf("배열 arr[%d]의 값 : %d\n", i, arr[i]);
  	printf("배열 arr[%d]의 값 : %d\n", i, *(arr + i));
  }
  for (int i = 0; i < 3; i++)
  {
  	//printf("포인터 ptr[%d]의 값 : %d\n", i, ptr[i]);
  	printf("포인터 ptr[%d]의 값 : %d\n", i, *(ptr + i));
  }
  // ↑↑↑ *(arr + i) == arr[i] 똑같은 표현 			↑↑↑
  // ↑↑↑ arr == arr 배열의 첫번째 값의 주소와 동일 == &arr[0]  ↑↑↑
  printf("arr 자체의 값 : %d\n", arr);	// 같다 ↓↓↓
  printf("arr[0] 의 주소 : %d\n", &arr[0]); // 같다 ↑↑↑

  printf("arr 자체의 값이 가지는 주소의 실제 값 : %d\n", *arr); // *(arr + 0) // 같다 ↓↓↓
  printf("arr[0] 의 실제 값 : %d\n", *&arr[0]);				// 같다 ↑↑↑

  // *& 는 아무것도 없는 것과 같다. & 는 주소이며, * 는 그 주소의 값이기 때문에,
  // *& 는 서로 상쇄된다.
  printf("arr[0] 의 실제 값 : %d\n", *&*&*&*&*&*&*&*&*&*&*&*&arr[0]);	// 같다 ↓↓↓
  printf("arr[0] 의 실제 값 : %d\n", arr[0]);				// 같다 ↑↑↑

# swap
  void swap(int a, int b);		// 함수선언
  void swap_addr(int *a, int *b);	// 함수선언(주소전달)
  
  int a = 10;
  int b = 20;

  printf("a 의 주소 : %d\n", &a);
  printf("b 의 주소 : %d\n", &b);

  // a 와 b 의 값을 바꾼다.
  printf("Swap 함수 전 => a : %d, b : %d\n", a, b);
  swap(a, b);
  printf("Swap 함수 후 => a : %d, b : %d\n", a, b);

  // 값에 의한 복사(Call by Value) -> 값만 복사한다는 의미 -> ↑↑↑함수후에 값이 그대로인 것을 확인 가능

  // 주소값을 넘기면? 메모리 공간에 있는 주소값 자체를 넘기면... 철수네처럼
  printf("(주소값 전달)Swap 함수 전 => a : %d, b : %d\n", a, b);
  swap_addr(&a, &b);						// 주소를 가져가 바꿨으므로
  printf("(주소값 전달)Swap 함수 후 => a : %d, b : %d\n", a, b);  // 바뀌어 나옴

    return 0;
  }

  void swap(int a, int b)
  {
    printf("(Swap 함수 내)a 의 주소 : %d\n", &a);	// 원래 a의 주소와 다른것을 확인 가능
    printf("(Swap 함수 내)b 의 주소 : %d\n", &b);

    int temp = a;
    a = b;
    b = temp;
    printf("Swap 함수 내 => a : %d, b : %d\n", a, b);	// a,b 의 값이 바뀌어 나옴

  }

  void swap_addr(int * a, int * b)	// 원래 값을 가져가므로 (포인터)* 을 붙힘
  {
    int temp = *a;
    *a = *b;
    *b = temp;
    printf("(주소값 전달)Swap 함수 내 => a : %d, b : %d\n", *a, *b);

  }

# 포인터로 배열 값 변경하기
  void changeArray(int* ptr);

  // 배열일 때, arr2 -> 주소
  int arr2[3] = { 10, 20, 30 };
  //changeArray(arr2);		// 같은 결과
  changeArray(&arr2[0]);	// 같은 결과
  for (int i = 0; i < 3; i++)
  {
	printf("%d\n", arr2[i]);
  }

  // scanf 에서 &num 과 같이 &을 사용하는 이유를 알게 됨
  
  void changeArray(int* ptr)
  {
	ptr[2] = 50;
  }

# 프로젝트
  #include <stdio.h>
  #include <time.h>

  // 물고기가 6마리가 있어요
  // 이들은 어항에 살고 있는데, 사막이에요
  // 사막이 너무 더워서, 너무 건조해서 물이 아주 빨리 증발을 해요
  // 물이 다 증발하기 전에 부지런히 어항에 물을 줘서 물고기를 살려주세요~~
  // 물고기는 시간이 지날수록 점점 커져서... 나중에는 .. 냠냠...

  int level;
  int arrayFish[6];
  int* cursor;

  void initData();
  void printfFishes();
  void decreaseWater(long elapsedTime);
  -----------------------------------------------------------함수선언↑↑↑
  int main(void)
  {
      long startTime = 0;		// 게임 시작 시간
      long totalElapsedTime = 0;	// 총 경과 시간
      long prevElapsedTime = 0;		// 직전 경과 시간 (최근에 물을 준 시간 간격)

      int num;				// 몇 번 어항에 물을 줄 것인지, 사용자 입력
      initData();			// 게임 초기화

      cursor = arrayFish;		// cursor[0]...cursor[1]...

      startTime = clock();		// 현재 시간을 1/1000초로 반환해줌

      while (1)				// 무한반복
      {
          printfFishes();
	  printf("몇 번 어항에 물을 주시겠어요?");
	  scanf_s("%d", &num);

	  // 입력값 체크
	  if (num < 1 || num>6)
	  {
	  	printf("\n입력값이 잘못되었습니다\n");
		continue;
	  }

	  // 총 경과 시간
	  totalElapsedTime = (clock() - startTime) / CLOCKS_PER_SEC; // 1000으로 나눠서 초단위로 보여줌
	  printf("총 경과 시간 : %ld 초\n", totalElapsedTime);

	  // 직전 물 준 시간(마지막으로 물 준 시간) 이후로 흐른 시간
	  prevElapsedTime = totalElapsedTime - prevElapsedTime;
	  printf("최근 경과 시간 : %ld 초\n", prevElapsedTime);

	  // 어항의 물을 감소 (증발)
	  decreaseWater(prevElapsedTime);

	  // 사용자가 입력한 어항에 물을 준다
	  // 1. 어항의 물이 0이면? 물을 주지 않는다
	  if (cursor[num - 1] <= 0)
	  {
		printf("%d 번 물고기는 이미 죽었습니다..물을 주지 않습니다\n", num);
	  }
	  
	  // 2. 어항의 물이 0이 아닌 경우? 물을 준다! 100을 넘지 않는지 체크
	  else if (cursor[num - 1] + 1 <= 100)
	  {
		// 물을 준다
		printf("%d 번 어항에 물을 줍니다\n\n", num);
		cursor[num - 1] += 1;
	  }
	  
	  // 레벨업을 할 건지 확인(레벨업은 20초마다 한번씩 수행
	  if (totalElapsedTime / 20 > level - 1)
	  {
		// 레벨업
		level++;
		printf(" *** 축 레벨업! 기존 %d 레벨어서 %d 레벨로 업그레이드 *** \n\n", level - 1, level);

		// 최종 레벨 : 5
		if (level == 5)
		{
			printf("\n\n축하합니다, 최고 레벨을 달성하였습니다. 게임을 종료합니다\n\n");
			exit(0);
		}
	  }

	  // 모든 물고기가 죽었는지 확인
	  if (checkFishAlive() == 0)
	  {
		// 물고기 모두 죽음
		printf("모든 물고기가..ㅠㅠ흑흑...\n");
		exit(0);
	  }
	  else
	  {
		// 최소 한마리 이상의 물고기는 살아 있음
		printf("물고기가 아직 살아 있어요!\n");
	  }
	  prevElapsedTime = totalElapsedTime;
      }

      return 0;
  }
  ---------------------------------------------------------함수↓↓↓
  void initData()
  {
      level = 1;		// 게임 레벨 (1~5)
      for (int i = 0; i < 6; i++)
      {
	  arrayFish[i] = 100;	// 어항의 물 높이(0~100)
      }
  }

  void printfFishes()
  {
      printf("%3d번 %3d번 %3d번 %3d번 %3d번 %3d번\n", 1, 2, 3, 4, 5, 6);
      for (int i = 0; i < 6; i++)
      {
	  printf(" %4d ", arrayFish[i]);
      }
      printf("\n\n");
  }

  void decreaseWater(long elapsedTime)
  {
      for (int i = 0; i < 6; i++)
      {
	  arrayFish[i] -= (level * 3 * (int)elapsedTime); // 3: 난이도 조절을 위한값
	  if (arrayFish[i] < 0)
	  {
		arrayFish[i] = 0;
	  }
      }
  }

  int checkFishAlive()
  {
      for (int i = 0; i < 6; i++)
      {
	  if (arrayFish[i] > 0)
	  {
		return 1; // 참 True
	  }
      }
      return 0;
  }
